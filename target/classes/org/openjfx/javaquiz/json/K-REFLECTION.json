{
    "name": "angel",
    "questions": [
    {
        "position": 96,
        "topic": "Reflection",
        "q": "What is Reflection in Java?",
        "a": "Reflection is Java's ability to inspect and dynamically call classes, methods, and attributes at runtime, modifying class behavior.",
        "x": [
            "Reflection is a tool for compiling Java code dynamically.",
            "Reflection is a library for optimizing JVM performance.",
            "Reflection is a feature for encrypting class data."
        ]
    },
    {
        "position": 97,
        "topic": "Reflection",
        "q": "What are the uses of Reflection in Java?",
        "a": "Reflection is used in testing, debugging, IDEs, frameworks like Spring, JAXP, and for dynamic program behavior at runtime.",
        "x": [
            "Reflection is used to manage database connections.",
            "Reflection is primarily for static code analysis.",
            "Reflection is used to generate bytecode at compile time."
        ]
    },
    {
    "position": 98,
    "topic": "Reflection",
    "q": "How can we access a private method...?",
    "a": "Using Reflection...",
    "x": [
            "Use getMethod() to directly access private methods.",
            "Modify the class's source code to make the method public.",
            "Use a public constructor to access private methods."
        ],
    "code": "FileName: Foo.java\npublic class Foo {\n    private void message() { System.out.println(\"hello java\"); }\n}\n\nFileName: FooMethodCall.java\nimport java.lang.reflect.Method;\npublic class FooMethodCall {\n    public static void main(String[] args) throws Exception {\n        Class c = Class.forName(\"Foo\");\n        Object o = c.newInstance();\n        Method m = c.getDeclaredMethod(\"message\", null);\n        m.setAccessible(true);\n        m.invoke(o, null);\n    }\n}"
},
    {
        "position": 99,
        "topic": "Reflection",
        "q": "How can we create an Object dynamically at Runtime in Java?",
        "a": "Using Reflection, create objects dynamically with Class.newInstance() or Constructor.newInstance() methods.",
        "x": [
            "Use Object.clone() to create dynamic objects.",
            "Use System.createObject() for runtime instantiation.",
            "Use static factory methods to create dynamic objects."
        ]
    }
]
}
