{
    "name": "angel",
    "questions": [
    {
    "position": 32,
    "topic": "Static",
    "q": "In Java, why do we use static variable?",
    "a": "To create a common property shared by all objects of a class. Static variables are loaded once during class loading, saving memory since they're not created per object.",
    "x": [
      "To create unique variables for each object instance that persist across method calls.",
      "To make variables accessible only within the same package and improve security.",
      "To automatically initialize variables with default values when objects are created."
    ]
  },
  {
    "position": 33,
    "topic": "Static",
    "q": "Why it is not a good practice to create static variables in Java?",
    "a": "Static variables have open-ended scope and can be accessed from anywhere, making code harder to control. They also violate Object-Oriented Programming principles by mixing class-level and object-level concerns.",
    "x": [
      "Static variables consume more memory because they are created for each object instance.",
      "Static variables cannot be modified after initialization, making them inflexible for dynamic programs.",
      "Static variables are automatically garbage collected, causing memory leaks in long-running applications."
    ]
  },
  {
    "position": 34,
    "topic": "Static",
    "q": "What is the purpose of static method in Java?",
    "a": "To create behavior at the class level that can be called without creating objects. Static methods can access static data members and provide convenience by not requiring object instantiation.",
    "x": [
      "To create methods that can only be called from within the same class for security purposes.",
      "To automatically override parent class methods and provide polymorphic behavior.",
      "To create methods that run in separate threads for better performance optimization."
    ]
  },
  {
    "position": 35,
    "topic": "Static",
    "q": "Why do we mark main method as static in Java?",
    "a": "So JVM can call it directly to start the program without creating an object. If main wasn't static, Java wouldn't know which constructor to use, creating ambiguity about the program's entry point.",
    "x": [
      "To ensure the main method can access all private variables and methods in the class.",
      "To prevent multiple instances of the main method from running simultaneously in different threads.",
      "To make the main method inherit all properties from the Object class automatically."
    ]
  },
  {
    "position": 36,
    "topic": "Static",
    "q": "In what scenario do we use a static block?",
    "a": "For complex initialization of static member variables. Static blocks execute before main() and can handle complicated initialization logic that simple assignment cannot handle.",
    "x": [
      "To initialize instance variables when an object is created for the first time.",
      "To execute cleanup code when the program terminates or classes are unloaded.",
      "To create synchronized methods that prevent concurrent access to static variables."
    ]
  },
  {
    "position": 37,
    "topic": "Static",
    "q": "Is it possible to execute a program without defining a main() method?",
    "a": "No, since Java 7 onwards you need a main() method to execute a program. Earlier Java versions allowed using static blocks as a workaround, but this has been removed.",
    "x": [
      "Yes, you can use static constructors instead of main() method in any Java version.",
      "Yes, but only if you mark the entire class as static and use static initialization blocks.",
      "Yes, you can use public void start() method as an alternative entry point for applications."
    ]
  },
  {
    "position": 38,
    "topic": "Static",
    "q": "What happens when static modifier is not mentioned in the signature of main method?",
    "a": "The program will compile successfully but throw NoSuchMethodError at runtime. Java specification requires main() to be static with a String array parameter.",
    "x": [
      "The program will not compile and show a compilation error about missing static modifier.",
      "The program will run normally but create a new instance of the class automatically.",
      "The program will compile but automatically convert the method to static during bytecode generation."
    ]
  },
  {
    "position": 39,
    "topic": "Static",
    "q": "What is the difference between static method and instance method in Java?",
    "a": "Static methods belong to the class and don't need objects to be called, but cannot access instance variables. Instance methods belong to objects, can access both static and instance variables, but require object creation to be called.",
    "x": [
      "Static methods can access instance variables but require the 'this' keyword, while instance methods cannot access static variables.",
      "Static methods are automatically inherited by subclasses, while instance methods must be explicitly overridden in each subclass.",
      "Static methods can be overridden in subclasses using polymorphism, while instance methods are fixed and cannot be changed."
    ]
  }
    
  ]
}
