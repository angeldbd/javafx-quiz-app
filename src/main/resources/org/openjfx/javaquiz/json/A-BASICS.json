{
    "name": "angel",
    "questions": [
    {
      "position": 1,
        "topic": "Basics",
      "q": "What is the difference between JDK and JRE?",
      "a": "JDK is for developing Java programs (includes compiler, debugger, JRE). JRE is only for running programs (JVM + libraries).",
      "x": [
        "JDK only runs Java programs, JRE compiles them.",
        "JDK is platform independent, JRE is platform dependent.",
        "JDK includes JVM, but JRE does not."
      ]
    },
    {
        "position": 2,
        "topic": "Basics",
      "q": "What is Java Virtual Machine (JVM)?",
      "a": "An abstract machine that executes Java bytecode, making Java platform independent.",
      "x": [
        "A compiler that converts Java code directly into machine code.",
        "A library package included in the JDK for debugging.",
        "A tool that translates JVM bytecode into C++."
      ]
    },
    {
        "position": 3,
            "topic": "Basics",
      "q": "What are the different types of memory areas allocated by JVM?",
      "a": "ClassLoader, Method Area, Heap, Stack, Program Counter, Native Method Stack.",
      "x": [
        "Only Heap and Stack.",
        "RAM, Cache, Disk.",
        "Static memory, Dynamic memory, Shared memory."
      ]
    },
    {
        "position": 4,
            "topic": "Basics",
      "q": "What is JIT compiler?",
      "a": "Just-In-Time compiler, compiles bytecode to native code at runtime for performance.",
      "x": [
        "A compiler used only at install time.",
        "A tool for debugging JVM errors.",
        "A library inside JDK for managing memory."
      ]
    },
    {
        "position": 5,
            "topic": "Basics",
      "q": "How Java platform is different from other platforms?",
      "a": "Java is platform-independent: code compiles to bytecode, runs on any JVM.",
      "x": [
        "Java needs platform-specific libraries to run.",
        "Java programs can run without JVM.",
        "Java is platform dependent like C++."
      ]
    },
     {
         "position": 6,
            "topic": "Basics",
      "q": "Why people say that Java is 'write once and run anywhere' language?",
      "a": "You can write Java code on Windows and compile it in Windows platform. The class and jar files that you get from Windows platform can run as it is on Unix environment. Behind all this portability is Java byte code. Byte code generated by Java compiler can be interpreted by any JVM. So it becomes much easier to write programs in Java and expect those to run on any platform.",
      "x": [
        "Because Java is faster than C++",
        "Because Java runs only on Windows",
        "Because Java compiles directly to machine code"
      ]
    },
    {
        "position": 7,
            "topic": "Basics",
      "q": "How does ClassLoader work in Java?",
      "a": "In Java, ClassLoader is a class that is used to load files in JVM. There are three main types of ClassLoaders: Bootstrap (loads from rt.jar), Extension (loads from jre/lib/ext), and Application (depends on CLASSPATH).",
      "x": [
        "ClassLoader is used only for networking",
        "ClassLoader only loads images",
        "ClassLoader is a keyword in Java"
      ]
    },
    {
        "position": 8,
            "topic": "Basics",
      "q": "Do you think ‘main’ used for main method is a keyword in Java?",
      "a": "No, main is just a name of method. It is not a keyword in Java. There can be multiple methods with same name main in a class file.",
      "x": [
        "Yes, main is a reserved keyword",
        "Yes, main is a datatype",
        "Yes, main is part of the JVM"
      ]
    },
    {
        "position": 9,
            "topic": "Basics",
      "q": "Can we write main method as public void static instead of public static void?",
      "a": "No, you cannot write it like this. Any method has to first specify the modifiers and then the return value. The order of modifiers can change, so static public void main() is valid but not public void static.",
      "x": [
        "Yes, both are valid",
        "Yes, void can go before static",
        "Yes, the order never matters"
      ]
    },
    {
        "position": 10,
            "topic": "Basics",
      "q": "In Java, if we do not specify any value for local variables, then what will be the default value?",
      "a": "Java does not initialize local variables with any default value. You must assign a value before using them.",
      "x": [
        "0 for numbers, false for booleans",
        "null always",
        "It depends on JVM version"
      ]
    },
    {
    "position": 11,
    "topic": "Basics",
    "q": "Let’s say, we run a Java class without passing any arguments. What will be the value of the String array of arguments in the main method?",
    "a": "By default, the String array is empty, not null.",
    "x": [
      "It is null",
      "It contains one empty string",
      "It holds random values"
    ]
  },
    {
      "position": 12,
      "topic": "Basics",
      "q": "What is the difference between byte and char data types in Java?",
      "a": "byte stores binary data (-128 to 127, 8 bits); char stores characters (16 bits, 2 bytes).",
      "x": [
        "byte and char are exactly the same",
        "byte can store characters and char only numbers",
        "char is 8 bits and byte is 16 bits"
      ]
    }
  ]
}
