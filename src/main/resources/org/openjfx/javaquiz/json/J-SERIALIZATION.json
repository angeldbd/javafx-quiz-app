{
    "name": "angel",
    "questions": [
    {
        "position": 87,
        "topic": "Serialization",
        "q": "What is serialization?",
        "a": "Serialization is the process of converting an object into a byte array, representing its class, version, and state, for transmission or storage.",
        "x": [
            "Serialization is a method to compile Java code into bytecode.",
            "Serialization is a process to encrypt an object's data.",
            "Serialization is a technique to clone objects in memory."
        ]
    },
    {
        "position": 88,
        "topic": "Serialization",
        "q": "What is the purpose of serialization?",
        "a": "Serialization enables transmitting objects over a network, persisting state in databases, caching for performance, and cross-JVM synchronization.",
        "x": [
            "Serialization is used to optimize JVM memory allocation.",
            "Serialization converts objects into executable machine code.",
            "Serialization is primarily for debugging object states."
        ]
    },
    {
        "position": 89,
        "topic": "Serialization",
        "q": "What is deserialization?",
        "a": "Deserialization is the process of reconstructing an object from its serialized byte array, the reverse of serialization.",
        "x": [
            "Deserialization converts bytecode into source code.",
            "Deserialization compresses objects for storage.",
            "Deserialization validates object integrity in memory."
        ]
    },
    {
        "position": 90,
        "topic": "Serialization",
        "q": "What is serialization and deserialization conceptually?",
        "a": "Serialization converts an object into a byte stream; deserialization converts the byte stream back into a copy of the original object.",
        "x": [
            "Serialization stores objects in a database; deserialization retrieves them.",
            "Serialization encrypts data; deserialization decrypts it.",
            "Serialization creates object backups; deserialization restores them."
        ]
    },
    {
        "position": 91,
        "topic": "Serialization",
        "q": "Why do we mark a data member transient?",
        "a": "Transient data members are excluded from serialization, indicating they should not be part of the object's persistent state.",
        "x": [
            "Transient members are serialized first to optimize storage.",
            "Transient members are used to encrypt serialized data.",
            "Transient members are automatically initialized during deserialization."
        ]
    },
    {
        "position": 92,
        "topic": "Serialization",
        "q": "Is it allowed to mark a method as transient?",
        "a": "No, the transient keyword is only valid for member variables, not methods.",
        "x": [
            "Yes, transient methods are excluded from serialization.",
            "Yes, transient methods are serialized separately.",
            "No, but transient methods can be marked as volatile instead."
        ]
    },
    {
        "position": 93,
        "topic": "Serialization",
        "q": "How does marking a field as transient make it possible to serialize an object?",
        "a": "Marking a field transient excludes it from serialization, allowing serialization of a class even if the field is not serializable.",
        "x": [
            "Transient fields are serialized with default values.",
            "Transient fields are converted to serializable types automatically.",
            "Transient fields are serialized separately from the object."
        ]
    },
    {
        "position": 94,
        "topic": "Serialization",
        "q": "What is the Externalizable interface in Java?",
        "a": "Externalizable extends Serializable, allowing a class to control serialization via writeExternal() and readExternal() methods.",
        "x": [
            "Externalizable is a marker interface for automatic serialization.",
            "Externalizable is used for encrypting serialized objects.",
            "Externalizable is a utility for cloning objects."
        ]
    },
    {
        "position": 95,
        "topic": "Serialization",
        "q": "What is the difference between Serializable and Externalizable interface?",
        "a": "Serializable is a marker interface with default serialization; Externalizable requires custom serialization via readExternal() and writeExternal().",
        "x": [
            "Serializable requires readExternal(); Externalizable does not.",
            "Serializable is not a marker interface; Externalizable is.",
            "Serializable needs a no-arg constructor; Externalizable does not."
        ]
    }
]
}
